//
// Created by buildmachine on 2021-03-11.
//

#include <gg_utility.h>
#include <tuple>

#ifndef GGTEST_IO_ENUM_H
#define GGTEST_IO_ENUM_H

namespace gg_core::gg_io {
enum class E_IO_AccessMode {
  R = 0b10, W = 0b01, RW = 0b11, U = 0b00
};

using IO_RegInfo = std::tuple<uint8_t, uint32_t, E_IO_AccessMode>;
using IO_AccessHandler = bool (*)();
using IO_RW_Policy = std::pair<IO_AccessHandler, IO_AccessHandler>;
using IO_Policy = std::tuple<IO_RW_Policy, IO_RW_Policy, IO_RW_Policy>;

enum E_IOField {
  NAME_ADDR = 0, WIDTH = 1, ACCESS_MODE = 2
};

enum E_IOName {
  ADDR_DISPCNT = 0x4000000,
  ADDR_DISPSTAT = 0x4000004,
  ADDR_VCOUNT = 0x4000006,
  ADDR_BG0CNT = 0x4000008,
  ADDR_BG1CNT = 0x400000a,
  ADDR_BG2CNT = 0x400000c,
  ADDR_BG3CNT = 0x400000e,
  ADDR_BG0HOFS = 0x4000010,
  ADDR_BG0VOFS = 0x4000012,
  ADDR_BG1HOFS = 0x4000014,
  ADDR_BG1VOFS = 0x4000016,
  ADDR_BG2HOFS = 0x4000018,
  ADDR_BG2VOFS = 0x400001a,
  ADDR_BG3HOFS = 0x400001c,
  ADDR_BG3VOFS = 0x400001e,
  ADDR_BG2PA = 0x4000020,
  ADDR_BG2PB = 0x4000022,
  ADDR_BG2PC = 0x4000024,
  ADDR_BG2PD = 0x4000026,
  ADDR_BG2X = 0x4000028,
  ADDR_BG2Y = 0x400002c,
  ADDR_BG3PA = 0x4000030,
  ADDR_BG3PB = 0x4000032,
  ADDR_BG3PC = 0x4000034,
  ADDR_BG3PD = 0x4000036,
  ADDR_BG3X = 0x4000038,
  ADDR_BG3Y = 0x400003c,
  ADDR_WIN0H = 0x4000040,
  ADDR_WIN1H = 0x4000042,
  ADDR_WIN0V = 0x4000044,
  ADDR_WIN1V = 0x4000046,
  ADDR_WININ = 0x4000048,
  ADDR_WINOUT = 0x400004a,
  ADDR_MOSAIC = 0x400004c,
  ADDR_BLDCNT = 0x4000050,
  ADDR_BLDALPHA = 0x4000052,
  ADDR_BLDY = 0x4000054,
  ADDR_SOUND1CNT_L = 0x4000060,
  ADDR_SOUND1CNT_H = 0x4000062,
  ADDR_SOUND1CNT_X = 0x4000064,
  ADDR_SOUND2CNT_L = 0x4000068,
  ADDR_SOUND2CNT_H = 0x400006c,
  ADDR_SOUND3CNT_L = 0x4000070,
  ADDR_SOUND3CNT_H = 0x4000072,
  ADDR_SOUND3CNT_X = 0x4000074,
  ADDR_SOUND4CNT_L = 0x4000078,
  ADDR_SOUND4CNT_H = 0x400007c,
  ADDR_SOUNDCNT_L = 0x4000080,
  ADDR_SOUNDCNT_H = 0x4000082,
  ADDR_SOUNDCNT_X = 0x4000084,
  ADDR_SOUNDBIAS = 0x4000088,
  ADDR_WAVE_RAM0_L = 0x4000090,
  ADDR_WAVE_RAM0_H = 0x4000092,
  ADDR_WAVE_RAM1_L = 0x4000094,
  ADDR_WAVE_RAM1_H = 0x4000096,
  ADDR_WAVE_RAM2_L = 0x4000098,
  ADDR_WAVE_RAM2_H = 0x400009a,
  ADDR_WAVE_RAM3_L = 0x400009c,
  ADDR_WAVE_RAM3_H = 0x400009e,
  ADDR_FIFO_A = 0x40000a0,
  ADDR_FIFO_B = 0x40000a4,
  ADDR_DMA0SAD = 0x40000b0,
  ADDR_DMA0DAD = 0x40000b4,
  ADDR_DMA0CNT_L = 0x40000b8,
  ADDR_DMA0CNT_H = 0x40000ba,
  ADDR_DMA1SAD = 0x40000bc,
  ADDR_DMA1DAD = 0x40000c0,
  ADDR_DMA1CNT_L = 0x40000c4,
  ADDR_DMA1CNT_H = 0x40000c6,
  ADDR_DMA2SAD = 0x40000c8,
  ADDR_DMA2DAD = 0x40000cc,
  ADDR_DMA2CNT_L = 0x40000d0,
  ADDR_DMA2CNT_H = 0x40000d2,
  ADDR_DMA3SAD = 0x40000d4,
  ADDR_DMA3DAD = 0x40000d8,
  ADDR_DMA3CNT_L = 0x40000dc,
  ADDR_DMA3CNT_H = 0x40000de,
  ADDR_TM0CNT_L = 0x4000100,
  ADDR_TM0CNT_H = 0x4000102,
  ADDR_TM1CNT_L = 0x4000104,
  ADDR_TM1CNT_H = 0x4000106,
  ADDR_TM2CNT_L = 0x4000108,
  ADDR_TM2CNT_H = 0x400010a,
  ADDR_TM3CNT_L = 0x400010c,
  ADDR_TM3CNT_H = 0x400010e,
  ADDR_SIODATA32 = 0x4000120,
  ADDR_SIOMULTI0 = 0x4000120,
  ADDR_SIOMULTI1 = 0x4000122,
  ADDR_SIOMULTI2 = 0x4000124,
  ADDR_SIOMULTI3 = 0x4000126,
  ADDR_SIOCNT = 0x4000128,
  ADDR_SIOMLT_SEND = 0x400012a,
  ADDR_SIODATA8 = 0x400012a,
  ADDR_KEYINPUT = 0x4000130,
  ADDR_KEYCNT = 0x4000132,
  ADDR_RCNT = 0x4000134,
  ADDR_JOYCNT = 0x4000140,
  ADDR_JOY_RECV = 0x4000150,
  ADDR_JOY_TRANS = 0x4000154,
  ADDR_JOYSTAT = 0x4000158,
  ADDR_IE = 0x4000200,
  ADDR_IF = 0x4000202,
  ADDR_WAITCNT = 0x4000204,
  ADDR_IME = 0x4000208,
  ADDR_POSTFLG = 0x4000300,
  ADDR_HALTCNT = 0x4000301
};

enum E_IO_OFFSET {
  OFFSET_DISPCNT = 0x0000000,
  OFFSET_DISPSTAT = 0x0000004,
  OFFSET_VCOUNT = 0x0000006,
  OFFSET_BG0CNT = 0x0000008,
  OFFSET_BG1CNT = 0x000000a,
  OFFSET_BG2CNT = 0x000000c,
  OFFSET_BG3CNT = 0x000000e,
  OFFSET_BG0HOFS = 0x0000010,
  OFFSET_BG0VOFS = 0x0000012,
  OFFSET_BG1HOFS = 0x0000014,
  OFFSET_BG1VOFS = 0x0000016,
  OFFSET_BG2HOFS = 0x0000018,
  OFFSET_BG2VOFS = 0x000001a,
  OFFSET_BG3HOFS = 0x000001c,
  OFFSET_BG3VOFS = 0x000001e,
  OFFSET_BG2PA = 0x0000020,
  OFFSET_BG2PB = 0x0000022,
  OFFSET_BG2PC = 0x0000024,
  OFFSET_BG2PD = 0x0000026,
  OFFSET_BG2X = 0x0000028,
  OFFSET_BG2X_L = 0x0000028,
  OFFSET_BG2X_H = 0x000002A,
  OFFSET_BG2Y = 0x000002c,
  OFFSET_BG2Y_L = 0x000002c,
  OFFSET_BG2Y_H = 0x000002e,
  OFFSET_BG3PA = 0x0000030,
  OFFSET_BG3PB = 0x0000032,
  OFFSET_BG3PC = 0x0000034,
  OFFSET_BG3PD = 0x0000036,
  OFFSET_BG3X = 0x0000038,
  OFFSET_BG3X_L = 0x0000038,
  OFFSET_BG3X_H = 0x000003A,
  OFFSET_BG3Y = 0x000003c,
  OFFSET_BG3Y_L = 0x000003c,
  OFFSET_BG3Y_H = 0x000003e,
  OFFSET_WIN0H = 0x0000040,
  OFFSET_WIN1H = 0x0000042,
  OFFSET_WIN0V = 0x0000044,
  OFFSET_WIN1V = 0x0000046,
  OFFSET_WININ = 0x0000048,
  OFFSET_WINOUT = 0x000004a,
  OFFSET_MOSAIC = 0x000004c,
  OFFSET_BLDCNT = 0x0000050,
  OFFSET_BLDALPHA = 0x0000052,
  OFFSET_BLDY = 0x0000054,
  OFFSET_SOUND1CNT_L = 0x0000060,
  OFFSET_SOUND1CNT_H = 0x0000062,
  OFFSET_SOUND1CNT_X = 0x0000064,
  OFFSET_SOUND2CNT_L = 0x0000068,
  OFFSET_SOUND2CNT_H = 0x000006c,
  OFFSET_SOUND3CNT_L = 0x0000070,
  OFFSET_SOUND3CNT_H = 0x0000072,
  OFFSET_SOUND3CNT_X = 0x0000074,
  OFFSET_SOUND4CNT_L = 0x0000078,
  OFFSET_SOUND4CNT_H = 0x000007c,
  OFFSET_SOUNDCNT_L = 0x0000080,
  OFFSET_SOUNDCNT_H = 0x0000082,
  OFFSET_SOUNDCNT_X = 0x0000084,
  OFFSET_SOUNDBIAS = 0x0000088,
  OFFSET_WAVE_RAM0_L = 0x0000090,
  OFFSET_WAVE_RAM0_H = 0x0000092,
  OFFSET_WAVE_RAM1_L = 0x0000094,
  OFFSET_WAVE_RAM1_H = 0x0000096,
  OFFSET_WAVE_RAM2_L = 0x0000098,
  OFFSET_WAVE_RAM2_H = 0x000009a,
  OFFSET_WAVE_RAM3_L = 0x000009c,
  OFFSET_WAVE_RAM3_H = 0x000009e,
  OFFSET_FIFO_A = 0x00000a0,
  OFFSET_FIFO_A_L = 0x00000a0,
  OFFSET_FIFO_A_H = 0x00000a2,
  OFFSET_FIFO_B = 0x00000a4,
  OFFSET_FIFO_B_L = 0x00000a4,
  OFFSET_FIFO_B_H = 0x00000a6,
  OFFSET_DMA0SAD = 0x00000b0,
  OFFSET_DMA0SAD_L = 0x00000b0,
  OFFSET_DMA0SAD_H = 0x00000b2,
  OFFSET_DMA0DAD = 0x00000b4,
  OFFSET_DMA0DAD_L = 0x00000b4,
  OFFSET_DMA0DAD_H = 0x00000b6,
  OFFSET_DMA0CNT_L = 0x00000b8,
  OFFSET_DMA0CNT_H = 0x00000ba,
  OFFSET_DMA1SAD = 0x00000bc,
  OFFSET_DMA1SAD_L = 0x00000bc,
  OFFSET_DMA1SAD_H = 0x00000be,
  OFFSET_DMA1DAD = 0x00000c0,
  OFFSET_DMA1DAD_L = 0x00000c0,
  OFFSET_DMA1DAD_H = 0x00000c2,
  OFFSET_DMA1CNT_L = 0x00000c4,
  OFFSET_DMA1CNT_H = 0x00000c6,
  OFFSET_DMA2SAD = 0x00000c8,
  OFFSET_DMA2SAD_L = 0x00000c8,
  OFFSET_DMA2SAD_H = 0x00000ca,
  OFFSET_DMA2DAD = 0x00000cc,
  OFFSET_DMA2DAD_L = 0x00000cc,
  OFFSET_DMA2DAD_H = 0x00000ce,
  OFFSET_DMA2CNT_L = 0x00000d0,
  OFFSET_DMA2CNT_H = 0x00000d2,
  OFFSET_DMA3SAD = 0x00000d4,
  OFFSET_DMA3SAD_L = 0x00000d4,
  OFFSET_DMA3SAD_H = 0x00000d6,
  OFFSET_DMA3DAD = 0x00000d8,
  OFFSET_DMA3DAD_L = 0x00000d8,
  OFFSET_DMA3DAD_H = 0x00000da,
  OFFSET_DMA3CNT_L = 0x00000dc,
  OFFSET_DMA3CNT_H = 0x00000de,
  OFFSET_TM0CNT_L = 0x0000100,
  OFFSET_TM0CNT_H = 0x0000102,
  OFFSET_TM1CNT_L = 0x0000104,
  OFFSET_TM1CNT_H = 0x0000106,
  OFFSET_TM2CNT_L = 0x0000108,
  OFFSET_TM2CNT_H = 0x000010a,
  OFFSET_TM3CNT_L = 0x000010c,
  OFFSET_TM3CNT_H = 0x000010e,
  OFFSET_SIODATA32 = 0x0000120,
  OFFSET_SIODATA32_L = 0x0000120,
  OFFSET_SIODATA32_H = 0x0000122,
  OFFSET_SIOMULTI0 = 0x0000120,
  OFFSET_SIOMULTI1 = 0x0000122,
  OFFSET_SIOMULTI2 = 0x0000124,
  OFFSET_SIOMULTI3 = 0x0000126,
  OFFSET_SIOCNT = 0x0000128,
  OFFSET_SIOMLT_SEND = 0x000012a,
  OFFSET_SIODATA8 = 0x000012a,
  OFFSET_KEYINPUT = 0x0000130,
  OFFSET_KEYCNT = 0x0000132,
  OFFSET_RCNT = 0x0000134,
  OFFSET_JOYCNT = 0x0000140,
  OFFSET_JOY_RECV = 0x0000150,
  OFFSET_JOY_RECV_L = 0x0000150,
  OFFSET_JOY_RECV_H = 0x0000152,
  OFFSET_JOY_TRANS = 0x0000154,
  OFFSET_JOY_TRANS_L = 0x0000154,
  OFFSET_JOY_TRANS_H = 0x0000156,
  OFFSET_JOYSTAT = 0x0000158,
  OFFSET_IE = 0x0000200,
  OFFSET_IF = 0x0000202,
  OFFSET_WAITCNT = 0x0000204,
  OFFSET_IME = 0x0000208,
  OFFSET_POSTFLG = 0x0000300,
  OFFSET_HALTCNT = 0x0000301
};

enum E_FILED_DISPSTAT {
  V_BLANK_BIT = 0,
  H_BLANK_BIT = 1,
  V_COUNTER_BIT = 2,
  V_BLANK_IRQ_BIT = 3,
  H_BLANK_IRQ_BIT = 4,
  V_COUNTER_IRQ_BIT = 5,
  LYC_START_BIT = 8,
  LYC_END_BIT = 15
};

enum E_FIELD_IRQ {
  E_IRQ_VBLANK = 0,
  E_IRQ_HBLANK = 1,
  E_IRQ_VCOUNT = 2,
  E_IRQ_TIMER0 = 3,
  E_IRQ_TIMER1 = 4,
  E_IRQ_TIMER2 = 5,
  E_IRQ_TIMER3 = 6,
  E_IRQ_SERIAL = 7,
  E_IRQ_DMA0 = 8,
  E_IRQ_DMA1 = 9,
  E_IRQ_DMA2 = 10,
  E_IRQ_DMA3 = 11,
  E_IRQ_KEYPAD = 12,
  E_IRQ_GAMEPAK = 13
};

constexpr static auto IORegInfoTable = gg_core::make_array(
	std::make_tuple(OFFSET_DISPCNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_DISPSTAT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_VCOUNT, 2, E_IO_AccessMode::R),
	std::make_tuple(OFFSET_BG0CNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_BG1CNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_BG2CNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_BG3CNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_BG0HOFS, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG0VOFS, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG1HOFS, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG1VOFS, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG2HOFS, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG2VOFS, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG3HOFS, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG3VOFS, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG2PA, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG2PB, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG2PC, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG2PD, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG2X_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG2X_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG2Y_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG2Y_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG3PA, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG3PB, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG3PC, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG3PD, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG3X_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG3X_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG3Y_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BG3Y_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_WIN0H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_WIN1H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_WIN0V, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_WIN1V, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_WININ, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_WINOUT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_MOSAIC, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_BLDCNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_BLDALPHA, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_BLDY, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_SOUND1CNT_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUND1CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUND1CNT_X, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUND2CNT_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUND2CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUND3CNT_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUND3CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUND3CNT_X, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUND4CNT_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUND4CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUNDCNT_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUNDCNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUNDCNT_X, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SOUNDBIAS, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_WAVE_RAM0_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_WAVE_RAM0_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_WAVE_RAM1_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_WAVE_RAM1_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_WAVE_RAM2_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_WAVE_RAM2_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_WAVE_RAM3_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_WAVE_RAM3_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_FIFO_A_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_FIFO_A_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_FIFO_B_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_FIFO_B_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA0SAD_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA0SAD_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA0DAD_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA0DAD_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA0CNT_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA0CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_DMA1SAD_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA1SAD_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA1DAD_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA1DAD_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA1CNT_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA1CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_DMA2SAD_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA2SAD_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA2DAD_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA2DAD_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA2CNT_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA2CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_DMA3SAD_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA3SAD_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA3DAD_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA3DAD_H, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA3CNT_L, 2, E_IO_AccessMode::W),
	std::make_tuple(OFFSET_DMA3CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_TM0CNT_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_TM0CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_TM1CNT_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_TM1CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_TM2CNT_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_TM2CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_TM3CNT_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_TM3CNT_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SIODATA32_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SIODATA32_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SIOMULTI0, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SIOMULTI1, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SIOMULTI2, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SIOMULTI3, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SIOCNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SIOMLT_SEND, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_SIODATA8, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_KEYINPUT, 2, E_IO_AccessMode::R),
	std::make_tuple(OFFSET_KEYCNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_RCNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_JOYCNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_JOY_RECV_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_JOY_RECV_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_JOY_TRANS_L, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_JOY_TRANS_H, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_JOYSTAT, 2, E_IO_AccessMode::R),
	std::make_tuple(OFFSET_IE, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_IF, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_WAITCNT, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_IME, 2, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_POSTFLG, 1, E_IO_AccessMode::RW),
	std::make_tuple(OFFSET_HALTCNT, 1, E_IO_AccessMode::W)
);

template<size_t I>
constexpr static int SetPolicy(std::array<uint8_t, 0x3ff> &tmp) {
  constexpr unsigned width = std::get<E_IOField::WIDTH>(IORegInfoTable[I]);
  constexpr unsigned addr = std::get<E_IOField::NAME_ADDR>(IORegInfoTable[I]);
  constexpr E_IO_AccessMode mode = std::get<E_IOField::ACCESS_MODE>(IORegInfoTable[I]);

  tmp[addr] = static_cast<uint8_t> (mode);
  if constexpr (width >= 2)
	tmp[addr + 1] = static_cast<uint8_t> (mode);
  return 0;
}

template<size_t... Idx>
consteval static std::array<uint8_t, 0x3ff> SetPolicies(std::index_sequence<Idx...>) {
  std::array<uint8_t, 0x3ff> tmp{};
  tmp.fill(static_cast<uint8_t>(E_IO_AccessMode::U));

  for (int i = 0 ; i < sizeof...(Idx) ; ++i) {
	unsigned width = std::get<E_IOField::WIDTH>(IORegInfoTable[i]);
	unsigned addr = std::get<E_IOField::NAME_ADDR>(IORegInfoTable[i]);
	E_IO_AccessMode mode = std::get<E_IOField::ACCESS_MODE>(IORegInfoTable[i]);

	for (int j = 0 ; j < width ; ++j) {
	  tmp[addr +j] = static_cast<uint8_t> (mode);
	} // for
  } // for

  return tmp;
}

constexpr static std::array<uint8_t, 0x3ff> policyTable =
	SetPolicies(std::make_index_sequence<IORegInfoTable.size()>{});
}
#endif //GGTEST_IO_ENUM_H
